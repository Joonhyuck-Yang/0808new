version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ../..
      dockerfile: gateway/Dockerfile
    container_name: msa-api-gateway
    ports:
      - "8080:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=false
      - SERVICE_DISCOVERY_TYPE=static  # static, consul, redis
      - LOG_LEVEL=INFO
    volumes:
      - ../../gateway:/app
    depends_on:
      - redis
      - consul
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (서비스 디스커버리용)
  redis:
    image: redis:7-alpine
    container_name: msa-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Consul (서비스 디스커버리용)
  consul:
    image: consul:1.15
    container_name: msa-consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - consul_data:/consul/data
    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (메트릭 수집)
  prometheus:
    image: prom/prometheus:latest
    container_name: msa-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - msa-network
    restart: unless-stopped

  # Grafana (모니터링 대시보드)
  grafana:
    image: grafana/grafana:latest
    container_name: msa-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - msa-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # 예시 마이크로서비스들
  user-service:
    build:
      context: ../user-service
      dockerfile: Dockerfile
    container_name: msa-user-service
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
      - SERVICE_NAME=user-service
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    build:
      context: ../order-service
      dockerfile: Dockerfile
    container_name: msa-order-service
    ports:
      - "8002:8002"
    environment:
      - PORT=8002
      - SERVICE_NAME=order-service
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  product-service:
    build:
      context: ../product-service
      dockerfile: Dockerfile
    container_name: msa-product-service
    ports:
      - "8003:8003"
    environment:
      - PORT=8003
      - SERVICE_NAME=product-service
    networks:
      - msa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (로드 밸런서)
  nginx:
    image: nginx:alpine
    container_name: msa-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - msa-network
    restart: unless-stopped
    depends_on:
      - api-gateway

volumes:
  redis_data:
    driver: local
  consul_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  msa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
